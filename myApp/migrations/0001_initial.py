# Generated by Django 5.1.2 on 2025-10-23 16:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise_type', models.CharField(choices=[('select', 'Single/Multi Select'), ('match', 'Match/Order'), ('rewrite', 'Rewrite for Clarity'), ('listen', 'Tap What You Hear'), ('speak', 'Say It Aloud'), ('scenario', 'Scenario Choice'), ('milestone', 'Milestone Recording')], max_length=20)),
                ('order', models.IntegerField()),
                ('prompt', models.TextField()),
                ('stimulus_text', models.TextField(blank=True)),
                ('stimulus_audio', models.URLField(blank=True)),
                ('stimulus_image', models.URLField(blank=True)),
                ('options', models.JSONField(blank=True, default=list)),
                ('correct_answers', models.JSONField(default=list)),
                ('reference_rewrite', models.TextField(blank=True)),
                ('rubric_criteria', models.JSONField(blank=True, default=dict)),
                ('xp_reward', models.IntegerField(default=5)),
                ('max_attempts', models.IntegerField(default=3)),
                ('hints', models.TextField(blank=True)),
                ('feedback_correct', models.TextField(blank=True)),
                ('feedback_incorrect', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['lesson', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('order', models.IntegerField()),
                ('duration_minutes', models.IntegerField()),
                ('xp_reward', models.IntegerField(default=10)),
                ('tip_sheet', models.TextField(blank=True)),
                ('learning_objectives', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['unit', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('duration_minutes', models.IntegerField()),
                ('xp_required', models.IntegerField()),
                ('milestone_duration_seconds', models.IntegerField()),
                ('district_name', models.CharField(max_length=100)),
                ('district_description', models.TextField()),
                ('district_image', models.URLField(blank=True)),
                ('coins_reward', models.IntegerField(default=0)),
                ('gems_reward', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('quest_type', models.CharField(choices=[('daily', 'Daily Quest'), ('weekly', 'Weekly Quest'), ('special', 'Special Quest')], max_length=10)),
                ('xp_required', models.IntegerField(blank=True, null=True)),
                ('lessons_required', models.IntegerField(blank=True, null=True)),
                ('streak_required', models.IntegerField(blank=True, null=True)),
                ('xp_reward', models.IntegerField(default=0)),
                ('coins_reward', models.IntegerField(default=0)),
                ('gems_reward', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('reward_type', models.CharField(choices=[('coin', 'Coin'), ('gem', 'Gem'), ('badge', 'Badge'), ('token', 'Token')], max_length=10)),
                ('description', models.TextField()),
                ('icon', models.URLField(blank=True)),
                ('level_required', models.IntegerField(blank=True, null=True)),
                ('xp_required', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price_monthly', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_yearly', models.DecimalField(decimal_places=2, max_digits=10)),
                ('features', models.JSONField(default=list)),
                ('max_family_members', models.IntegerField(default=1)),
                ('stripe_price_id_monthly', models.CharField(blank=True, max_length=100)),
                ('stripe_price_id_yearly', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='AuthProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=20)),
                ('provider_id', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExerciseAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField(default=1)),
                ('user_response', models.JSONField()),
                ('audio_recording', models.URLField(blank=True)),
                ('duration_seconds', models.IntegerField()),
                ('is_correct', models.BooleanField()),
                ('score', models.FloatField()),
                ('xp_earned', models.IntegerField()),
                ('ai_feedback', models.TextField(blank=True)),
                ('rubric_scores', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myApp.exercise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_xp', models.IntegerField()),
                ('current_streak', models.IntegerField()),
                ('lessons_completed', models.IntegerField()),
                ('rank', models.IntegerField()),
                ('league', models.CharField(default='bronze', max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-total_xp', '-current_streak'],
            },
        ),
        migrations.AddField(
            model_name='exercise',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='myApp.lesson'),
        ),
        migrations.CreateModel(
            name='ContentBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('content_type', models.CharField(max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_blocks', to='myApp.exercise')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_blocks', to='myApp.lesson')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.URLField(blank=True)),
                ('coach_name', models.CharField(blank=True, max_length=100)),
                ('coach_description', models.TextField(blank=True)),
                ('xp_required', models.IntegerField()),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='myApp.level')),
            ],
        ),
        migrations.CreateModel(
            name='MilestoneChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('duration_seconds', models.IntegerField()),
                ('rubric', models.JSONField(default=dict)),
                ('xp_reward', models.IntegerField(default=50)),
                ('coins_reward', models.IntegerField(default=20)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='myApp.level')),
            ],
        ),
        migrations.CreateModel(
            name='MilestoneAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_recording', models.URLField()),
                ('duration_seconds', models.IntegerField()),
                ('is_passed', models.BooleanField()),
                ('overall_score', models.FloatField()),
                ('rubric_scores', models.JSONField()),
                ('ai_feedback', models.TextField(blank=True)),
                ('xp_earned', models.IntegerField()),
                ('coins_earned', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myApp.milestonechallenge')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('daily_goal_minutes', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(60)])),
                ('learning_goal', models.CharField(default='converse_confidently', max_length=100)),
                ('current_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('total_xp', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('coins', models.IntegerField(default=0)),
                ('gems', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Streak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('streak_freeze_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=100)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('family_members', models.ManyToManyField(blank=True, related_name='family_subscription', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myApp.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='TipSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('examples', models.JSONField(blank=True, default=list)),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tip_sheet_obj', to='myApp.lesson')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('order', models.IntegerField()),
                ('duration_minutes', models.IntegerField()),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='myApp.level')),
            ],
            options={
                'ordering': ['level', 'order'],
                'unique_together': {('level', 'order')},
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='myApp.unit'),
        ),
        migrations.AlterUniqueTogether(
            name='exercise',
            unique_together={('lesson', 'order')},
        ),
        migrations.AlterUniqueTogether(
            name='lesson',
            unique_together={('unit', 'order')},
        ),
        migrations.CreateModel(
            name='UserQuest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False)),
                ('progress', models.JSONField(default=dict)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myApp.quest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'quest')},
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('quantity', models.IntegerField(default=1)),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myApp.reward')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'reward')},
            },
        ),
    ]
